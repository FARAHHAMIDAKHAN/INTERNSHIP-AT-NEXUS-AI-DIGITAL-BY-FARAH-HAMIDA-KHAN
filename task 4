{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":18858,"sourceType":"datasetVersion","datasetId":13996}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"\n# In this we will use a better model than logistic regression and  advanced metrics like Precision,\n# Recall, and F1-score.\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:22:41.735214Z","iopub.execute_input":"2025-10-03T10:22:41.735682Z","iopub.status.idle":"2025-10-03T10:22:41.740120Z","shell.execute_reply.started":"2025-10-03T10:22:41.735660Z","shell.execute_reply":"2025-10-03T10:22:41.739293Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n\ndf.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:22:41.748221Z","iopub.execute_input":"2025-10-03T10:22:41.748445Z","iopub.status.idle":"2025-10-03T10:22:41.798860Z","shell.execute_reply.started":"2025-10-03T10:22:41.748429Z","shell.execute_reply":"2025-10-03T10:22:41.798177Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n0  7590-VHVEG  Female              0     Yes         No       1           No   \n1  5575-GNVDE    Male              0      No         No      34          Yes   \n2  3668-QPYBK    Male              0      No         No       2          Yes   \n3  7795-CFOCW    Male              0      No         No      45           No   \n4  9237-HQITU  Female              0      No         No       2          Yes   \n\n      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n0  No phone service             DSL             No  ...               No   \n1                No             DSL            Yes  ...              Yes   \n2                No             DSL            Yes  ...               No   \n3  No phone service             DSL            Yes  ...              Yes   \n4                No     Fiber optic             No  ...               No   \n\n  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n0          No          No              No  Month-to-month              Yes   \n1          No          No              No        One year               No   \n2          No          No              No  Month-to-month              Yes   \n3         Yes          No              No        One year               No   \n4          No          No              No  Month-to-month              Yes   \n\n               PaymentMethod MonthlyCharges  TotalCharges Churn  \n0           Electronic check          29.85         29.85    No  \n1               Mailed check          56.95        1889.5    No  \n2               Mailed check          53.85        108.15   Yes  \n3  Bank transfer (automatic)          42.30       1840.75    No  \n4           Electronic check          70.70        151.65   Yes  \n\n[5 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customerID</th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>...</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7590-VHVEG</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>1</td>\n      <td>No</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>Yes</td>\n      <td>Electronic check</td>\n      <td>29.85</td>\n      <td>29.85</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5575-GNVDE</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>34</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>No</td>\n      <td>Mailed check</td>\n      <td>56.95</td>\n      <td>1889.5</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3668-QPYBK</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>2</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>Yes</td>\n      <td>Mailed check</td>\n      <td>53.85</td>\n      <td>108.15</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7795-CFOCW</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>45</td>\n      <td>No</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>No</td>\n      <td>Bank transfer (automatic)</td>\n      <td>42.30</td>\n      <td>1840.75</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9237-HQITU</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>2</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>Yes</td>\n      <td>Electronic check</td>\n      <td>70.70</td>\n      <td>151.65</td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 21 columns</p>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\ndf.dropna(inplace=True)\n\nif 'customerID' in df.columns:\n    df.drop('customerID', axis=1, inplace=True)\n\ndf['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\ndf = pd.get_dummies(df, drop_first=True)\nprint(\"Shape of DataFrame:\", df.shape)\nprint(\"Any NaNs?\", df.isnull().sum().sum())\nprint(\"Preview of DataFrame:\")\nprint(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:22:41.800134Z","iopub.execute_input":"2025-10-03T10:22:41.800356Z","iopub.status.idle":"2025-10-03T10:22:41.847146Z","shell.execute_reply.started":"2025-10-03T10:22:41.800339Z","shell.execute_reply":"2025-10-03T10:22:41.846433Z"}},"outputs":[{"name":"stdout","text":"Shape of DataFrame: (7032, 31)\nAny NaNs? 0\nPreview of DataFrame:\n   SeniorCitizen  tenure  MonthlyCharges  TotalCharges  Churn  gender_Male  \\\n0              0       1           29.85         29.85      0        False   \n1              0      34           56.95       1889.50      0         True   \n2              0       2           53.85        108.15      1         True   \n3              0      45           42.30       1840.75      0         True   \n4              0       2           70.70        151.65      1        False   \n\n   Partner_Yes  Dependents_Yes  PhoneService_Yes  \\\n0         True           False             False   \n1        False           False              True   \n2        False           False              True   \n3        False           False             False   \n4        False           False              True   \n\n   MultipleLines_No phone service  ...  StreamingTV_No internet service  \\\n0                            True  ...                            False   \n1                           False  ...                            False   \n2                           False  ...                            False   \n3                            True  ...                            False   \n4                           False  ...                            False   \n\n   StreamingTV_Yes  StreamingMovies_No internet service  StreamingMovies_Yes  \\\n0            False                                False                False   \n1            False                                False                False   \n2            False                                False                False   \n3            False                                False                False   \n4            False                                False                False   \n\n   Contract_One year  Contract_Two year  PaperlessBilling_Yes  \\\n0              False              False                  True   \n1               True              False                 False   \n2              False              False                  True   \n3               True              False                 False   \n4              False              False                  True   \n\n   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n0                                  False                            True   \n1                                  False                           False   \n2                                  False                           False   \n3                                  False                           False   \n4                                  False                            True   \n\n   PaymentMethod_Mailed check  \n0                       False  \n1                        True  \n2                        True  \n3                       False  \n4                       False  \n\n[5 rows x 31 columns]\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n\ndf['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\ndf = df[df['TotalCharges'].notna()]\n\nif 'customerID' in df.columns:\n    df.drop('customerID', axis=1, inplace=True)\n\ndf['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\ndf = pd.get_dummies(df, drop_first=True)\n\nprint(\"Rows after cleaning:\", df.shape[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:22:41.847946Z","iopub.execute_input":"2025-10-03T10:22:41.848233Z","iopub.status.idle":"2025-10-03T10:22:41.907448Z","shell.execute_reply.started":"2025-10-03T10:22:41.848209Z","shell.execute_reply":"2025-10-03T10:22:41.906725Z"}},"outputs":[{"name":"stdout","text":"Rows after cleaning: 7032\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"X = df.drop('Churn', axis=1)\ny = df['Churn']\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:22:46.352286Z","iopub.execute_input":"2025-10-03T10:22:46.352757Z","iopub.status.idle":"2025-10-03T10:22:46.378041Z","shell.execute_reply.started":"2025-10-03T10:22:46.352733Z","shell.execute_reply":"2025-10-03T10:22:46.377310Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"lr_model = LogisticRegression(max_iter=1000)\nlr_model.fit(X_train_scaled, y_train)\n\ny_pred_lr = lr_model.predict(X_test_scaled)\n\nprint(\"ðŸ”¹ Logistic Regression Performance:\\n\")\nprint(classification_report(y_test, y_pred_lr))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:24:06.952398Z","iopub.execute_input":"2025-10-03T10:24:06.952903Z","iopub.status.idle":"2025-10-03T10:24:07.223394Z","shell.execute_reply.started":"2025-10-03T10:24:06.952881Z","shell.execute_reply":"2025-10-03T10:24:07.222837Z"}},"outputs":[{"name":"stdout","text":"ðŸ”¹ Logistic Regression Performance:\n\n              precision    recall  f1-score   support\n\n           0       0.83      0.88      0.86      1033\n           1       0.62      0.52      0.56       374\n\n    accuracy                           0.79      1407\n   macro avg       0.73      0.70      0.71      1407\nweighted avg       0.78      0.79      0.78      1407\n\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X_train_scaled, y_train)\n\ny_pred_rf = rf_model.predict(X_test_scaled)\n\nprint(\"ðŸ”¹ Random Forest Performance:\\n\")\nprint(classification_report(y_test, y_pred_rf))\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:24:32.072150Z","iopub.execute_input":"2025-10-03T10:24:32.072792Z","iopub.status.idle":"2025-10-03T10:24:32.633307Z","shell.execute_reply.started":"2025-10-03T10:24:32.072767Z","shell.execute_reply":"2025-10-03T10:24:32.632437Z"}},"outputs":[{"name":"stdout","text":"ðŸ”¹ Random Forest Performance:\n\n              precision    recall  f1-score   support\n\n           0       0.82      0.90      0.86      1033\n           1       0.63      0.47      0.54       374\n\n    accuracy                           0.78      1407\n   macro avg       0.73      0.69      0.70      1407\nweighted avg       0.77      0.78      0.77      1407\n\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred_rf)\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\nplt.title('Random Forest Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-03T10:24:59.862071Z","iopub.execute_input":"2025-10-03T10:24:59.862336Z","iopub.status.idle":"2025-10-03T10:25:00.283451Z","shell.execute_reply.started":"2025-10-03T10:24:59.862316Z","shell.execute_reply":"2025-10-03T10:25:00.282726Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"# Based on the evaluation metrics:\n\n\nRandom Forest (or XGBoost) achieved higher Recall and F1-Score for predicting churned customers.\n\nIn a business context, Recall is critical because we want to correctly identify most customers who are likely to churn so we can intervene.\n\nTherefore, the advanced model is preferred and should be deployed.","metadata":{}}]}
